// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/IBM/FfDL/commons/service (interfaces: LifecycleManagerClient)

// Package mock_service is a generated GoMock package.
package mock_service

import (
	gomock "github.com/golang/mock/gomock"
	service "github.com/IBM/FfDL/commons/service"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockLifecycleManagerClient is a mock of LifecycleManagerClient interface
type MockLifecycleManagerClient struct {
	ctrl     *gomock.Controller
	recorder *MockLifecycleManagerClientMockRecorder
}

// MockLifecycleManagerClientMockRecorder is the mock recorder for MockLifecycleManagerClient
type MockLifecycleManagerClientMockRecorder struct {
	mock *MockLifecycleManagerClient
}

// NewMockLifecycleManagerClient creates a new mock instance
func NewMockLifecycleManagerClient(ctrl *gomock.Controller) *MockLifecycleManagerClient {
	mock := &MockLifecycleManagerClient{ctrl: ctrl}
	mock.recorder = &MockLifecycleManagerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLifecycleManagerClient) EXPECT() *MockLifecycleManagerClientMockRecorder {
	return m.recorder
}

// DeployTrainingJob mocks base method
func (m *MockLifecycleManagerClient) DeployTrainingJob(arg0 context.Context, arg1 *service.JobDeploymentRequest, arg2 ...grpc.CallOption) (*service.JobDeploymentResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeployTrainingJob", varargs...)
	ret0, _ := ret[0].(*service.JobDeploymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeployTrainingJob indicates an expected call of DeployTrainingJob
func (mr *MockLifecycleManagerClientMockRecorder) DeployTrainingJob(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployTrainingJob", reflect.TypeOf((*MockLifecycleManagerClient)(nil).DeployTrainingJob), varargs...)
}

// HaltTrainingJob mocks base method
func (m *MockLifecycleManagerClient) HaltTrainingJob(arg0 context.Context, arg1 *service.JobHaltRequest, arg2 ...grpc.CallOption) (*service.JobHaltResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HaltTrainingJob", varargs...)
	ret0, _ := ret[0].(*service.JobHaltResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HaltTrainingJob indicates an expected call of HaltTrainingJob
func (mr *MockLifecycleManagerClientMockRecorder) HaltTrainingJob(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HaltTrainingJob", reflect.TypeOf((*MockLifecycleManagerClient)(nil).HaltTrainingJob), varargs...)
}

// KillTrainingJob mocks base method
func (m *MockLifecycleManagerClient) KillTrainingJob(arg0 context.Context, arg1 *service.JobKillRequest, arg2 ...grpc.CallOption) (*service.JobKillResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "KillTrainingJob", varargs...)
	ret0, _ := ret[0].(*service.JobKillResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KillTrainingJob indicates an expected call of KillTrainingJob
func (mr *MockLifecycleManagerClientMockRecorder) KillTrainingJob(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KillTrainingJob", reflect.TypeOf((*MockLifecycleManagerClient)(nil).KillTrainingJob), varargs...)
}
