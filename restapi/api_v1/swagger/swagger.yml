#
# Copyright 2017-2018 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


swagger: '2.0'
info:
  title: IBM Deep Learning as a Service (DLaaS)
  description: |
    DLaaS enables deep learning (DL) highly scalable training of models for multiple frameworks on GPUs. The [DLaaS user
    guide](https://dlaas-guide.stage1.mybluemix.net/) provides more details on how to use the service, including examples.
  version: "1.0.0"
host: gateway.watsonplatform.net
schemes:
  - https
basePath: /
consumes:
  - application/json
produces:
  - application/json

securityDefinitions:
  basicAuth:
    type: basic
    description: Basic Autentication credentials for using the API.
  watsonAuthToken:
    type: apiKey
    in: header
    name: X-Watson-Authorization-Token
    description: Watson Developer Cloud Token Autentication. See [here](https://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/getting_started/gs-tokens.shtml) for more information
  basicAuthToken:
    type: apiKey
    in: header
    name: Authorization
    description: Watson Developer Cloud Basic Autentication. See [here](https://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/getting_started/gs-tokens.shtml) for more information
  watsonAuthTokenQuery:
    type: apiKey
    in: query
    name: watson-token
    description: Watson Developer Cloud Token Autentication. See [here](https://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/getting_started/gs-tokens.shtml) for more information

security: [ { basicAuthToken: [] }, { watsonAuthToken: [] }, { watsonAuthTokenQuery: [] } ]

# Optional parameters for the security and authentication.
parameters:
  WatsonUserinfo:
    name: X-Watson-Userinfo
    description: Bluemix user information injected by the Watson gateway
    type: string
    in: header
    required: false
  DlaasUser:
    name: X-DLaaS-UserID
    description: User ID of the DLaaS user (from Bluemix)
    type: string
    in: header
    required: false
  DlaasGroup:
    name: X-DLaaS-Roles
    description: Roles of a DLaaS user
    type: string
    in: header
    required: false

paths:
  /v1/models:
    post:
      tags:
        - Models
      summary: Trains a new deep learning model.
      description: |
        Trains a deep neural network written in a DL framework supported by the DLaaS platform (such as Caffe, Tensorflow, etc.). The model code has to be uploaded and configuration parameters have to be provided.
      operationId: postModel
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - name: model_definition
          in: formData
          description: The deep learning model code as compressed archive (ZIP).
          required: false
          type: file
        - name: manifest
          in: formData
          description: The manifest providing configuration for the deep learning model, the training data and the training execution.
          required: true
          type: file
        - name: version
          in: query
          description: The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format.
          required: true
          type: string
          default: "2017-02-13"
      responses:
        201:
          description: Deep learning model successfully accepted.
          schema:
            $ref: "#/definitions/BasicNewModel"
          headers:
            Location:
              description: Location header containing the model id.
              type: string
        400:
          description: Error in the the model_definition or manifest.
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'

    get:
      tags:
        - Models
      summary: Get a list of available deep learning models.
      description: |
        Get a list of all available deep learning models and their configuration that a user can see.
      operationId: listModels
      parameters:
        - name: version
          in: query
          description: The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format.
          required: true
          type: string
          default: "2017-02-13"
      responses:
        200:
          description: List of deep learning models.
          schema:
            $ref: '#/definitions/ModelList'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'

  /v1/models/{model_id}:
    get:
      tags:
        - Models
      summary: Get detailed information about a model.
      description: |
        Get detailed information about a model such as training status.
      parameters:
        - name: model_id
          in: path
          description: The id of the model.
          required: true
          type: string
        - name: version
          in: query
          description: The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format.
          required: true
          type: string
          default: "2017-02-13"
      operationId: getModel
      responses:
        200:
          description: Detailed model and training information.
          schema:
            $ref: '#/definitions/Model'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Model with the given ID not found.
          schema:
            $ref: '#/definitions/Error'

    patch:
      tags:
        - Models
      summary: Changes the status of the training progress.
      description: Changes the status of the training progress to the given `status` value (currently `halt` only). Halt means the training will be stopped and the last snapshot will be stored and can be retrieved.
      operationId: patchModel
      parameters:
        - name: model_id
          in: path
          description: The id of the model.
          required: true
          type: string
        - name: payload
          in: body
          description: Currently accepts "halt" as the only valid value.
          required: true
          schema:
            $ref: '#/definitions/TrainingUpdate'
        - name: version
          in: query
          description: The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format.
          required: true
          type: string
          default: "2017-02-13"
      responses:
        202:
          description: Training successfully halted.
          schema:
            $ref: '#/definitions/BasicModel'
        400:
          description: Incorrect status specified.
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Model with the given ID not found.
          schema:
            $ref: '#/definitions/Error'

    delete:
      tags:
        - Models
      summary: Deletes an existing model
      description: |
        Deletes an existing model. It does not delete any data in the user's data store.
      parameters:
        - name: model_id
          description: The id of the model.
          in: path
          required: true
          type: string
          format: string
        - name: version
          in: query
          description: The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format.
          required: true
          type: string
          default: "2017-02-13"
      operationId: deleteModel
      responses:
        200:
          description: Model deleted successfully.
          schema:
            $ref: '#/definitions/BasicModel'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        404:
          description: The model cannot be found.
          schema:
            $ref: '#/definitions/Error'

  /v1/models/{model_id}/definition:
    get:
      tags:
        - Models
      summary: Downloads the model definition.
      description: Downloads the model definition that was initial used for training as ZIP archive.
      operationId: downloadModelDefinition
      produces:
        - application/octet-stream
      parameters:
        - name: model_id
          description: The id of the model.
          in: path
          required: true
          type: string
          format: string
        - name: version
          in: query
          description: The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format.
          required: true
          type: string
          default: "2017-02-13"
      responses:
        200:
          description: Model definition
          schema:
            type: string
            format: binary
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        404:
          description: The model cannot be found.
          schema:
            $ref: '#/definitions/Error'


  /v1/models/{model_id}/trained_model:
    get:
      tags:
        - Models
      summary: Downloads the trained model.
      description: Downloads the trained model as ZIP archive.
      produces:
        - application/octet-stream
      operationId: downloadTrainedModel
      parameters:
        - name: model_id
          description: The id of the model.
          in: path
          required: true
          type: string
          format: string
        - name: version
          in: query
          description: The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format.
          required: true
          type: string
          default: "2017-02-13"
      responses:
        200:
          description: Model definition
          schema:
            type: string
            format: binary
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        404:
          description: The trained model cannot be found.
          schema:
            $ref: '#/definitions/Error'
        410:
          description: If the trained model storage time has expired and it has been deleted. It only gets deleted if it not stored on an external data store.
          schema:
            $ref: '#/definitions/Error'

  /v1/models/{model_id}/logs:
    get:
      deprecated: true
      security: [] # disable basic auth b/c basic auth is not supported in the browser
      tags:
        - Models
      summary: |
        Get training logs as websocket stream.
      description: |
        Get training logs for the given model as websocket stream. Each message can contain one or more log lines.
      produces:
        - application/octet-stream
      parameters:
        - name: model_id
          description: The id of the model.
          in: path
          required: true
          type: string
          format: string
        - name: follow
          description: Follow the log stream if true. Default false.
          in: query
          required: false
          default: false
          type: boolean
          format: boolean
        - name: since_time
          description: An RFC3339 timestamp from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned.  If this value is in the future, no logs will be returned.
          in: query
          required: false
          default: ""
          type: string
          format: string
        - name: version
          in: query
          description: The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format.
          required: true
          type: string
          default: "2017-02-13"
      operationId: getLogs
      responses:
        200:
          description: Dump of the training log to-date
          schema:
            type: string
            format: binary
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        404:
          description: The model cannot be found.
          schema:
            $ref: '#/definitions/Error'

  /v1/models/{model_id}/metrics:
    get:
      security: [] # disable basic auth b/c basic auth is not supported in the browser
      tags:
        - Models
      summary: |
        Get training metrics from a model training as websocket.
      description: |
        Get training metrics such as learning rate, accurarcy, loss from a model training via a websocket. It returns one or more JSON payloads at a time with the following schema.
      produces:
        - application/octet-stream
      parameters:
        - name: model_id
          description: The id of the model.
          in: path
          required: true
          type: string
          format: string
        - name: follow
          description: Follow the log stream if true. Default false.
          in: query
          required: false
          default: false
          type: boolean
          format: boolean
        - name: since_time
          description: An RFC3339 timestamp from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned.  If this value is in the future, no metrics will be returned.
          in: query
          required: false
          default: ""
          type: string
          format: string
        - name: version
          in: query
          description: The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format.
          required: true
          type: string
          default: "2017-06-07"
      operationId: getMetrics
      responses:
        200:
          description: Dump of the training log to-date
          schema:
            type: string
            format: binary
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        404:
          description: The training job cannot be found.
          schema:
            $ref: '#/definitions/Error'

  "/v1/logs/{model_id}/emetrics":
    get:
      summary: Get evaluation metrics records, based on query
      operationId: GetEMetrics
      responses:
        200:
          description: "(streaming responses)"
          schema:
            "$ref": "#/definitions/v1EMetricsList"
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      operationId: getEMetrics
      parameters:
      - name: model_id
        description: The id of the model.
        in: path
        required: true
        type: string
        format: string
      - name: searchType
        in: query
        required: false
        type: string
        default: TERM
        enum:
        - TERM
        - NESTED
        - MATCH
        default: TERM
      - name: since_time
        description: 'Time from which to show logs. If this value precedes the time a pod was started,
            only logs since the pod start will be returned.
            If this value is in the future, no logs will be returned. If this value is a raw integer, it represents
            the time that the metric occured: representing the number of milliseconds since midnight January 1, 1970.
            If this value is a negative integer, it represents the number of lines to count backwards.
            If this value is empty, the logs since the beginning of the job will be returned'
        in: query
        required: false
        default: ""
        type: string
        format: string
      - name: pagesize
        description: 'Number of lines to output.'
        in: query
        required: false
        type: integer
        format: int32
      - name: pos
        description: 'If positive, line number from start, if negative line counting from end'
        in: query
        required: false
        type: integer
        format: int64
      - name: version
        in: query
        description: The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format.
        required: false
        type: string
        default: "2017-10-01"
      tags:
      - TrainingData

  "/v1/logs/{model_id}/loglines":
    get:
      summary: Get loglines, based on query
      operationId: GetLogs
      responses:
        200:
          description: "(streaming responses)"
          schema:
            "$ref": "#/definitions/v1LogLinesList"
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      operationId: getLoglines
      parameters:
      - name: model_id
        description: The id of the model.
        in: path
        required: true
        type: string
        format: string
      - name: searchType
        in: query
        required: false
        type: string
        default: TERM
        enum:
        - TERM
        - NESTED
        - MATCH
        default: TERM
      - name: since_time
        description: 'Time from which to show logs. If this value precedes the time a pod was started,
            only logs since the pod start will be returned.
            If this value is in the future, no logs will be returned. If this value is a raw integer, it represents
            the time that the metric occured: representing the number of milliseconds since midnight January 1, 1970.
            If this value is a negative integer, it represents the number of lines to count backwards.
            If this value is empty, the logs since the beginning of the job will be returned'
        in: query
        required: false
        default: ""
        type: string
        format: string
      - name: pagesize
        description: 'Number of lines to output.'
        in: query
        required: false
        type: integer
        format: int32
      - name: pos
        description: 'If positive, line number from start, if negative line counting from end'
        in: query
        required: false
        type: integer
        format: int64
      - name: version
        in: query
        description: The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format.
        required: false
        type: string
        default: "2017-10-01"
      tags:
      - TrainingData

  /v1/models/{model_id}/events/{event_type}:
    get:
      security: [] # disable basic auth b/c basic auth is not supported in the browser
      tags:
        - Events
      summary: Get all notification endpoints for this event type.
      description: Get all notification endpoint URLs for this event type.
      produces:
        - application/octet-stream
      operationId: getEventTypeEndpoints
      parameters:
        - name: model_id
          description: The id of the model.
          in: path
          required: true
          type: string
          format: string
        - name: event_type
          description: The type of event.
          in: path
          required: true
          type: string
          format: string
      responses:
        200:
          description: Event endpoints
          schema:
            $ref: '#/definitions/EndpointList'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        404:
          description: The model or event type cannot be found.
          schema:
            $ref: '#/definitions/Error'
        410:
          description: If the trained model storage time has expired and it has been deleted. It only gets deleted if it not stored on an external data store.
          schema:
            $ref: '#/definitions/Error'

  /v1/models/{model_id}/events/{event_type}/{endpoint_id}:
    get:
      tags:
        - Events
      summary: Get endpoint description.
      description: Get a specific endpoint description.
      produces:
        - application/octet-stream
      operationId: getEventEndpoint
      parameters:
        - name: model_id
          description: The id of the model.
          in: path
          required: true
          type: string
          format: string
        - name: event_type
          description: The type of event.
          in: path
          required: true
          type: string
          format: string
        - name: endpoint_id
          description: The id of the endpoint.
          in: path
          required: true
          type: string
          format: string
      responses:
        200:
          description: Event description
          schema:
            $ref: '#/definitions/Endpoint'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        404:
          description: The model or event type cannot be found.
          schema:
            $ref: '#/definitions/Error'
        410:
          description: If the trained model storage time has expired and it has been deleted. It only gets deleted if it not stored on an external data store.
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - Events
      summary: Creates an event notification endpoint.
      description: Creates a specific event type's URL notification endpoint.
      produces:
        - application/octet-stream
      operationId: createEventEndpoint
      parameters:
        - name: model_id
          description: The id of the model.
          in: path
          required: true
          type: string
          format: string
        - name: event_type
          description: The type of event.
          in: path
          required: true
          type: string
          format: string
        - name: endpoint_id
          description: The id of the endpoint.
          in: path
          required: true
          type: string
          format: string
        - name: callback_url
          in: body
          description: The URL that should be notified when an event triggers.
          required: true
          schema:
            $ref: '#/definitions/EventEndpointRegistration'
      responses:
        200:
          description: Event updated successfully
          schema:
            type: string
            format: binary
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        404:
          description: The model or event type cannot be found.
          schema:
            $ref: '#/definitions/Error'
        410:
          description: If the trained model storage time has expired and it has been deleted. It only gets deleted if it not stored on an external data store.
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Events
      summary: Deletes an event notification endpoint.
      description: Deletes a specific event type's URL notification endpoint.
      produces:
        - application/octet-stream
      operationId: deleteEventEndpoint
      parameters:
        - name: model_id
          description: The id of the model.
          in: path
          required: true
          type: string
          format: string
        - name: event_type
          description: The type of event.
          in: path
          required: true
          type: string
          format: string
        - name: endpoint_id
          description: The id of the endpoint.
          in: path
          required: true
          type: string
          format: string
      responses:
        200:
          description: Event updated successfully
          schema:
            type: string
            format: binary
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        404:
          description: The model or event type cannot be found.
          schema:
            $ref: '#/definitions/Error'
        410:
          description: If the trained model storage time has expired and it has been deleted. It only gets deleted if it not stored on an external data store.
          schema:
            $ref: '#/definitions/Error'

definitions:

  Event:
    type: object
    properties:
      type:
        type: string
        description: the type of event (i.e. update, metrics, logs, all...)
      endpoints:
        $ref: '#/definitions/EndpointList'

  EventList:
    type: object
    properties:
      events:
        type: array
        items:
          $ref: '#/definitions/Event'


  Endpoint:
    type: object
    properties:
      id:
        type: string
        description: the id of the endpoint
      url:
        type: string
        description: the url of the endpoint

  EndpointList:
    type: object
    properties:
      endpoints:
        type: array
        items:
          $ref: '#/definitions/Endpoint'

  EventEndpointRegistration:
    type: object
    properties:
      url:
        description: The URL to notify on events.
        type: string
      type:
        description: The type of event this URL should be notified of.
        type: string

  BasicModel:
    type: object
    properties:
      model_id:
        type: string
        description: A unique id of the deep learning model.


  BasicNewModel:
    allOf:
      - $ref: '#/definitions/BasicModel'
      - properties:
          location:
            type: string
            description: Location of the model to retrieve it.

  Model:
    allOf:
      - $ref: '#/definitions/BasicNewModel'
      - properties:
          name:
            type: string
            description: The name of the deep learning model.
          description:
            type: string
            description: Detailed description of deep learning model.
          framework:
            $ref: '#/definitions/Framework'
          training:
            $ref: '#/definitions/Training'
          data_stores:
            type: array
            items:
              $ref: '#/definitions/Datastore'
          metrics:
            type: array
            items:
              $ref: '#/definitions/MetricData'

  Framework:
    type: object
    properties:
      name:
        type: string
        description: the name of the deep learning framework (e.g. caffe, torch, tensorflow)
      version:
        type: string
        description: the version of the specific framework to use.

  Training:
    type: object
    properties:
      command:
        type: string
        description: the command invoked for running the training. This is specific to the DL framework
      size:
        type: string
        description: the pre-configured deployment size to used for training. The is used instead of directly specifying CPU, GPU, memory and learners.
      cpus:
        type: number
        format: double
        description: Number of CPUs required
      gpus:
        type: number
        format: double
        description: Number of CPUs required
      memory:
        type: number
        format: double
        description: Amount of memory required
      memory_unit:
        type: string
        description: |
          Memory unit (default: MiB)
        enum:
          - MiB
          - MB
          - GiB
          - GB
        default: MiB
      learners:
        type: integer
        format: int32
        description: Number of learners required.
      input_data:
        type: array
        description: Input data to the training, such as training data, pre-trained model. The input is specified as references to the data_store ids that contain the data.
        items:
          type: string
          description: Reference to a data store id.
      output_data:
        type: array
        description: Output data of the training, such as trained models. The output is specified as references to the data_store ids that contain the data.
        items:
          type: string
          description: Reference to a data store id.
      training_status:
        $ref: '#/definitions/TrainingStatus'
      events:
        $ref: '#/definitions/EventList'

  Datastore:
    type: object
    properties:
      data_store_id:
        type: string
        description: the id of the data store as defined in the manifest.
      type:
        type: string
        description: the type of the data store as defined in the manifest.
      connection:
        type: object
        additionalProperties:
          type: string

  ModelList:
    type: object
    properties:
      models:
        type: array
        items:
          $ref: '#/definitions/Model'

  TrainingStatus:
    type: object
    properties:
      status:
        description: Status of the training.
        type: string
      status_description:
        description: Description of the training status.
        type: string
      submitted:
        description: |
          Training submission timestamp (Format: yyyy-MM-dd'T'HH:mm:ss.SSS'Z')
        type: string
      completed:
        description: |
          Training completion timestamp (Format: yyyy-MM-dd'T'HH:mm:ss.SSS'Z')
        type: string
      status_message:
        description: A human readable message description of the training status.
        type: string
      error_code:
        description: A code identifying the cause of a status message.
        type: string


  MetricData:
    type: object
    properties:
      type:
        description: The type of metrics data
        type: string
      timestamp:
        type: string
        description: |
          Timestamp of the metric. Format: yyyy-MM-dd'T'HH:mm:ss.SSS'Z'
      iteration:
        type: number
        format: int32
        description: Current iteration number be processed.
      Values:
        type: object
        additionalProperties:
          type: object
        description: map of key/values, that describe evaluation metrics

  TrainingUpdate:
    type: object
    properties:
      status:
        description: The status action to be executed on the training job. (Currently only `halt` is supported.)
        type: string

  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      error:
        type: string
      description:
        type: string

  AnyDataType:
    type: string
    enum:
    - STRING
    - JSONSTRING
    - INT
    - FLOAT
    default: STRING

  QuerySearchType:
    type: string
    enum:
    - TERM
    - NESTED
    - MATCH
    - ALL
    default: TERM

  v1AddResponse:
    type: object
    properties:
      success:
        type: boolean
        format: boolean
    title: "***"

  v1Any:
    type: object
    properties:
      type:
        "$ref": "#/definitions/AnyDataType"
      value:
        type: string

  v1DeleteResponse:
    type: object
    properties:
      success:
        type: boolean
        format: boolean

  v1EMetrics:
    type: object
    properties:
      meta:
        "$ref": "#/definitions/v1MetaInfo"
      etimes:
        type: object
        additionalProperties:
          "$ref": "#/definitions/v1Any"
        title: |-
          Repeated, order-dependent list of temporal keys
          Example: {"iteration": 209}
      grouplabel:
        type: string
        title: Group label, such as test, train, or validate
      values:
        type: object
        additionalProperties:
          "$ref": "#/definitions/v1Any"
        title: "/ {\"cross_entropy\": 0.4430539906024933,\t\"accuracy\": 0.8999999761581421}"

  v1EMetricsList:
    type: object
    properties:
      models:
        type: array
        items:
          $ref: '#/definitions/v1EMetrics'

  v1HelloResponse:
    type: object
    properties:
      msg:
        type: string

  v1LogLine:
    type: object
    properties:
      meta:
        "$ref": "#/definitions/v1MetaInfo"
      line:
        type: string

  v1LogLinesList:
    type: object
    properties:
      models:
        type: array
        items:
          $ref: '#/definitions/v1LogLine'

  v1MetaInfo:
    type: object
    properties:
      training_id:
        type: string
        title: Unique id identifying the training job
      user_id:
        type: string
        title: Unique id identifying the user
      time:
        type: string
        format: int64
        description: 'Time that the metric occured: representing the number of millisecond
          since midnight January 1, 1970.'
      rindex:
        type: string
        format: int64
        title: sequential index
